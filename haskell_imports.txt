Language Extension

{-# LANGUAGE OverloadedStrings #-}
â†’ Allows string literals (like "wordle") to be interpreted as different string-like types (Text, ByteString, etc.) instead of just String.

ðŸ”¹ ByteString & Text

import qualified Data.ByteString.Lazy.Char8 as LBS
â†’ Lazy ByteString operations, useful for handling JSON HTTP responses (responseBody).

import qualified Data.Text as T
â†’ Efficient Unicode text handling (immutable, optimized). Used for words and feedback.

import qualified Data.Text.IO as TIO
â†’ Reading and writing Text from files (used to load 5words.txt).

ðŸ”¹ Utility & Randomness

import Data.Maybe (fromMaybe)
â†’ Helpers for working with Maybe values (defaulting, extraction).

import System.Random (randomRIO)
â†’ Generate random numbers in a given range (used to pick random guess words).

ðŸ”¹ HTTP Client

import Network.HTTP.Client
â†’ Low-level HTTP client (building requests, sending them, handling cookies).

import Network.HTTP.Client.TLS (tlsManagerSettings)
â†’ Provides TLS/HTTPS support for http-client (needed for https:// Wordle API).

ðŸ”¹ JSON (Aeson library)

import Data.Aeson
â†’ Encode/decode JSON, build JSON objects (object, .= operator, encode, eitherDecode).

import Data.Aeson.Types (parseMaybe, parseEither)
â†’ Helpers to extract fields from JSON (.: for parsing keys safely).

ðŸ”¹ Exception Handling

import Control.Exception (catch, SomeException)
â†’ Catch runtime/network/IO errors safely instead of crashing.

âœ… Summary

Text/ByteString â†’ Efficient string handling for input/output and API payloads.

Random â†’ Choose random words for guessing.

HTTP Client + TLS â†’ Make secure API requests to Wordle server.

Aeson â†’ Encode requests, decode responses from JSON.

Exception Handling â†’ Handle IO/network errors gracefully.
